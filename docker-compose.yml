################################### SERVICES DESCRIPTION ###################################

# PostgreSQL: PostgreSQL is used as the backend database for Airflow.
# It stores metadata related to workflows, task states, execution logs, and other relevant information.

# pgAdmin: pgAdmin is an administration and development tool used to manage the PostgreSQL database.
# It provides a graphical interface for tasks such as querying the database, configuring settings, monitoring performance, and managing users.

# Redis: Redis is an in-memory data structure store used as a message broker in the Airflow setup.
# It facilitates the exchange of messages between different components of Airflow.

# Celery: Celery is a distributed task queue system used as the task execution engine in Airflow.
# It allows for the asynchronous and parallel execution of tasks across multiple workers.
# Celery workers retrieve tasks from the task queue and execute them independently.

# Airflow: Airflow is an open-source platform for orchestrating and managing workflows.
# It allows users to define, schedule, and monitor workflows as Directed Acyclic Graphs (DAGs). Airflow provides several key components:

## Airflow Scheduler: The Airflow Scheduler is responsible for determining when tasks should be executed based on their dependencies and schedules.
# It interacts with the Airflow database and message broker to trigger task execution.

## Airflow Webserver: The Airflow Webserver provides a web-based user interface to monitor and control workflow executions.
# It fetches information from the Airflow database, such as DAG definitions, task states, and execution logs,
# to display the current status of workflows and tasks.

## Airflow Worker: Airflow Workers are responsible for executing tasks.
# They retrieve tasks from the task queue (managed by Celery) and execute them independently.
# Workers communicate with the Airflow database and message broker to update task status and results.

## Airflow Triggerer: The Airflow Triggerer is responsible for triggering workflow executions based on defined schedules or external events.
# It interacts with the Airflow Scheduler to initiate workflow runs.

################################### WORKFLOW  DESCRIPTION ###################################

# Airflow Scheduler, running as part of the Airflow infrastructure, communicates with the Airflow database,
# Redis (message broker), and Celery to orchestrate task execution.

# When a workflow is scheduled to run, the Airflow Scheduler adds task messages to the Celery task queue.
# These messages contain information about the tasks and their dependencies.

# Celery workers, connected to the Celery task queue, retrieve task messages and execute tasks asynchronously.
# Workers communicate task progress, status updates, and results to Redis.

# The Airflow Worker component listens to task updates in Redis, retrieves the information,
# and updates the Airflow database with task statuses and results.

# The Airflow Webserver fetches data from the Airflow database to provide a graphical
# interface where users can monitor workflow execution, view task logs, and manage workflows.

# The Airflow Triggerer component, based on predefined schedules or external triggers,
# communicates with the Airflow Scheduler to initiate workflow runs and trigger task execution.

# PostgreSQL, as the backend database, stores and retrieves workflow metadata,
# task states, execution logs, and other relevant information.

# pgAdmin provides a graphical interface to manage the PostgreSQL database,
# allowing administrators and developers to interact with the database, configure settings, and monitor performance.

################################### DOCKER COMPOSE FILE ###################################

version: '3'

x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: ./airflow/Dockerfile.airflow
  env_file:
    - .env
  environment:
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./airflow/data:/opt/airflow/data
    - ./airflow/airflow.cfg:/opt/airflow/airflow.cfg
    - ./dbt:/opt/dbt
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    env_file:
      - .env
    ports:
      - 5431:5432
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
      - ./postgres/postgres-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  redis:
    image: redis:latest
    env_file:
      - .env
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    env_file:
      - .env
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    env_file:
      - .env
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        exec /entrypoint airflow version
    env_file:
      - .env
    user: "0:0"

  pg-admin:
    image: dpage/pgadmin4
    restart: always
    env_file:
      - .env
    ports:
      - 5050:80
    depends_on:
      - postgres
    volumes:
      - .pgadmin/pgadmin-data:/var/lib/pgadmin
    
    
